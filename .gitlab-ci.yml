services:
  - postgres:12.5-alpine
  - docker:19.03-dind

stages:
  - build
  - test
  - publish
  - deploy

variables:
  IMAGE_TAG: ${CI_REGISTRY_IMAGE}/${CI_COMMIT_REF_NAME}:${CI_PIPELINE_ID}
  POSTGRES_DB: diecast_collector_dev
  POSTGRES_USER: diecast_collector
  POSTGRES_PASSWORD: diecast_collector
  POSTGRES_HOST_AUTH_METHOD: trust
  DOCKER_HOST: tcp://localhost:2375
  DOCKER_TLS_CERTDIR: ""

build:
  stage: build
  image: openjdk:14-alpine
  script:
    - ./gradlew --version
    - ./gradlew assemble --info
  artifacts:
    paths:
      - build/*
  only:
    - master
    - stage
    - merge_requests

test:
  stage: test
  image: openjdk:14-alpine
  script:
    - ./gradlew --version
    - ./gradlew test --info
  only:
    - master
    - stage
    - merge_requests

publish:
  stage: publish
  image: docker:19.03
  script:
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build --pull -t $IMAGE_TAG .
    - docker push $IMAGE_TAG
  only:
    - master
    - stage

deploy:
  stage: deploy
  image: dtzar/helm-kubectl:3.3.1
  script:
    - source .gitlab-ci.${CI_COMMIT_REF_NAME}.env
    - mkdir -p $HOME/.kube && echo $KUBERNETES_CONFIG | base64 -d > $HOME/.kube/config
    - kubectl version
    - kubectl create ns ${CI_PROJECT_NAME} --dry-run=client -o yaml | kubectl apply -f -
    - |
      kubectl create secret docker-registry gitlab-auth-${CI_PROJECT_NAME} \
        --namespace=${CI_PROJECT_NAME} \
        --docker-server=registry.gitlab.com \
        --docker-username="$CI_DEPLOY_USER" \
        --docker-password="$CI_DEPLOY_PASSWORD" \
        --docker-email="$GITLAB_USER_EMAIL" -o yaml \
        --dry-run=client | kubectl apply -f -
    - |
      helm upgrade ${CI_PROJECT_NAME} ./helm \
        -f ./helm/${CI_COMMIT_REF_NAME}.yaml \
        --atomic \
        --install \
        --debug \
        --namespace ${CI_PROJECT_NAME} \
        --set image=${IMAGE_TAG}
  only:
    - master
    - stage
  when: manual