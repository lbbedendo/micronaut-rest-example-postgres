plugins {
    id("com.github.johnrengelman.shadow") version "6.1.0"
    id("io.micronaut.application") version "1.2.0"
    id("nu.studer.jooq") version "3.0.3"
    id("org.flywaydb.flyway") version "7.5.2"
    id("checkstyle")
}

version = "0.1"
group = "io.platosedu"

repositories {
    mavenCentral()
    jcenter()
}

micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("io.platosedu.*")
    }
}

dependencies {
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.configuration:micronaut-openapi")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-runtime")
    implementation("javax.annotation:javax.annotation-api")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.sql:micronaut-jdbc-hikari")
    implementation("io.micronaut.sql:micronaut-jooq")
    implementation("io.micronaut.data:micronaut-data-jdbc")
    implementation("io.swagger.core.v3:swagger-annotations")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    jooqRuntime("org.postgresql:postgresql:42.2.18")
    testRuntimeOnly("org.testcontainers:postgresql")
    testImplementation("org.assertj:assertj-core:3.11.1")
}

def conf = "jooq.conf"
def props = new Properties()
if (new File(conf).exists()) {
    props.load(new FileInputStream(conf))
}


flyway {
    url = props.getProperty("db.url")
    user = props.getProperty("db.username")
    password = props.getProperty("db.password")
    schemas = ['public']
    locations = ["filesystem:$project.projectDir/src/main/resources/db/migration"]
}

jooq {
    version = '3.11.11'
    edition = 'OSS'
    micronautRestExamplePostgres(sourceSets.main) {
        jdbc {
            driver = 'org.postgresql.Driver'
            url = props.getProperty("db.url")
            user = props.getProperty("db.username")
            password = props.getProperty("db.password")
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                name = 'org.jooq.meta.postgres.PostgresDatabase'
                inputSchema = 'public'
            }
            generate {
                relations = true
                deprecated = false
                records = true
                immutablePojos = true
                fluentSetters = true
            }
            target {
                packageName = 'io.platosedu.jooq'
            }
        }
    }
}


application {
    mainClass.set("io.platosedu.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("11")
    targetCompatibility = JavaVersion.toVersion("11")
}

generateMicronautRestExamplePostgresJooqSchemaSource.dependsOn flywayMigrate

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.addAll([
            '-parameters',
            // enables incremental compilation
            '-Amicronaut.processing.incremental=true',
            '-Amicronaut.processing.annotations=io.platosedu.*',
            "-Amicronaut.processing.group=$project.group",
            "-Amicronaut.processing.module=$project.name",
    ])
    options.fork = true
    options.forkOptions.jvmArgs << '-Dmicronaut.openapi.views.spec=rapidoc.enabled=true,swagger-ui.enabled=true,swagger-ui.theme=flattop'
}

checkstyle {
    configFile = rootProject.file('checkstyle/checkstyle.xml')
    checkstyleTest.enabled = false
}

tasks.withType(Checkstyle) {
    excludes = ["**/jooq/**/*.java"]
    reports {
        html.enabled true
        html.stylesheet resources.text.fromFile('checkstyle/config/xsl/checkstyle-custom.xsl')
    }
}